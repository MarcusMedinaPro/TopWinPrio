name: ðŸ”’ Security & Quality Reports

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore packages
        run: nuget restore TopWinPrio.sln

      # CodeQL Analysis for security vulnerabilities - needs to see the build
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-extended,security-and-quality

      # Build during CodeQL analysis so it can track the compilation
      - name: Build for CodeQL Analysis
        run: msbuild TopWinPrio.sln /p:Configuration=Release /m /p:Platform="Any CPU"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      # Enhanced StyleCop & Code Analysis
      - name: Run Enhanced Code Analysis
        run: |
          # StyleCop + Code Analysis with detailed reporting
          msbuild TopWinPrio.sln /p:Configuration=Release /p:RunCodeAnalysis=true /p:TreatWarningsAsErrors=false /flp1:logfile=StyleCop-Report.log;verbosity=diagnostic /flp2:logfile=CodeAnalysis-Report.log;verbosity=normal
          
          # Generate XML reports for parsing
          msbuild TopWinPrio.CS/TopWinPrio.csproj /p:Configuration=Release /p:RunCodeAnalysis=true /logger:"XMLLogger,Microsoft.Build.Engine;StyleCop-Results.xml" 2>nul || echo "XML logger not available, skipping XML report"
        continue-on-error: true

      # Dependency vulnerability scanning
      - name: Dependency Vulnerability Scan
        run: |
          # Check for known vulnerable packages
          dotnet list TopWinPrio.Tests/TopWinPrio.Tests.csproj package --vulnerable --include-transitive > vulnerability-report.txt 2>&1 || echo "No vulnerable packages detected or command not available" > vulnerability-report.txt
          
          # Manual NuGet package check (nuget audit not available in this version)
          echo "NuGet Package Security Analysis:" > nuget-audit.txt
          echo "================================" >> nuget-audit.txt
          Get-Content "TopWinPrio.CS/packages.config" | Where-Object { $_ -match '<package id=' } | ForEach-Object {
            $packageLine = $_
            $packageId = ($packageLine -replace '.*id="([^"]*)".*', '$1')
            $version = ($packageLine -replace '.*version="([^"]*)".*', '$1')
            echo "Package: $packageId, Version: $version" >> nuget-audit.txt
          }
          echo "" >> nuget-audit.txt
          echo "Manual security review recommended for packages listed above." >> nuget-audit.txt
          echo "Check https://github.com/advisories for known vulnerabilities." >> nuget-audit.txt
        continue-on-error: true

      # License compliance check  
      - name: License Compliance Check
        run: |
          dotnet list TopWinPrio.Tests/TopWinPrio.Tests.csproj package --include-transitive > license-report.txt 2>&1 || true
        continue-on-error: true

      # Upload all security reports
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            StyleCop-Report.log
            CodeAnalysis-Report.log  
            StyleCop-Results.xml
            vulnerability-report.txt
            nuget-audit.txt
            license-report.txt

  quality-metrics:
    name: Quality Metrics
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Code metrics and complexity analysis
      - name: Calculate Code Metrics
        run: |
          # Lines of code count - filter to files only
          Get-ChildItem -Recurse -Include "*.cs" -File | Where-Object { 
            $_.FullName -notlike "*\bin\*" -and 
            $_.FullName -notlike "*\obj\*" -and
            $_.FullName -notlike "*\packages\*"
          } | ForEach-Object {
              try {
                $content = Get-Content $_.FullName -ErrorAction Stop
                "$($_.Name): $($content.Length) lines"
              } catch {
                "$($_.Name): Error reading file - $($_.Exception.Message)"
              }
          } | Out-File -FilePath code-metrics.txt
          
          # File count summary  
          $csFiles = (Get-ChildItem -Recurse -Include "*.cs" -File | Where-Object { 
            $_.FullName -notlike "*\bin\*" -and 
            $_.FullName -notlike "*\obj\*" -and
            $_.FullName -notlike "*\packages\*"
          }).Count
          "Total C# files: $csFiles" | Add-Content code-metrics.txt
          
          Get-Content code-metrics.txt

      # Documentation coverage
      - name: Documentation Analysis
        run: |
          # Check for XML documentation - filter to files only
          Get-ChildItem -Recurse -Include "*.cs" -File | Where-Object { 
            $_.FullName -notlike "*\bin\*" -and 
            $_.FullName -notlike "*\obj\*" -and
            $_.FullName -notlike "*\packages\*"
          } | ForEach-Object {
              try {
                $content = Get-Content $_.FullName -Raw -ErrorAction Stop
                $xmlDocCount = ([regex]::Matches($content, "///")).Count
                $publicMethodCount = ([regex]::Matches($content, "public.*\s+\w+\s*\(")).Count
                "$($_.Name): $xmlDocCount XML docs, $publicMethodCount public methods"
              } catch {
                "$($_.Name): Error reading file - $($_.Exception.Message)"
              }
          } | Out-File -FilePath documentation-report.txt
          
          Get-Content documentation-report.txt

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            code-metrics.txt
            documentation-report.txt
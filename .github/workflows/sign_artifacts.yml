# ‚ö†Ô∏è DISABLED - Replaced by release.yml
# This workflow is no longer used. Signing is now part of the release pipeline.
# See release.yml for the new linear workflow: build ‚Üí quality ‚Üí scan ‚Üí sign ‚Üí release

name: üîè Sign Artifacts (Local Runner) - DISABLED

on:
  workflow_dispatch:  # Manual only - not triggered automatically

permissions:
  contents: write
  actions: read

jobs:
  sign:
    if: github.event.workflow_run.conclusion == 'success'
    name: Sign artifacts on self-hosted runner
    runs-on: [self-hosted, windows, code-sign]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download unsigned build artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          name: release-bin
          path: unsigned
          workflow: build-test.yml
          run_id: ${{ github.event.workflow_run.id }}

      - name: Copy Sign-All.ps1 script
        shell: pwsh
        run: |
          $sourcePath = "C:\Git\Certskit\Sign-All.ps1"
          $destPath = "unsigned\Sign-All.ps1"

          if (Test-Path $sourcePath) {
            Copy-Item $sourcePath $destPath -Force
            Write-Host "‚úÖ Copied Sign-All.ps1 from C:\Git\Certskit\" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Sign-All.ps1 not found at $sourcePath" -ForegroundColor Red
            Write-Host "Please ensure C:\Git\Certskit\Sign-All.ps1 exists on runner machine" -ForegroundColor Yellow
            exit 1
          }

      - name: Sign artifacts with Sign-All.ps1
        shell: pwsh
        run: |
          Write-Host "Running Sign-All.ps1 in unsigned directory..." -ForegroundColor Cyan
          cd unsigned
          & .\Sign-All.ps1

          # Check if signing was successful
          $signedFiles = Get-ChildItem -Include *.exe, *.dll -Recurse | Where-Object {
            $sig = Get-AuthenticodeSignature $_.FullName
            $sig.Status -eq 'Valid'
          }

          if ($signedFiles.Count -gt 0) {
            Write-Host "‚úÖ Successfully signed $($signedFiles.Count) file(s)" -ForegroundColor Green
          } else {
            Write-Error "No files were signed successfully"
            exit 1
          }

      - name: Prepare signed artifacts folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path signed | Out-Null

          # Copy signed files to signed folder
          $files = Get-ChildItem -Path unsigned -Include *.exe, *.dll -Recurse | Where-Object {
            $sig = Get-AuthenticodeSignature $_.FullName
            $sig.Status -eq 'Valid'
          }

          foreach ($f in $files) {
            Copy-Item $f.FullName signed/ -Force
            Write-Host "Copied signed: $($f.Name)" -ForegroundColor Green
          }

          # Copy the sign log if it exists
          if (Test-Path "unsigned\sign_log.txt") {
            Copy-Item "unsigned\sign_log.txt" signed/ -Force
            Write-Host "Copied sign_log.txt" -ForegroundColor Cyan
          }

          Write-Host "‚úÖ Signed artifacts prepared" -ForegroundColor Green

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-bin
          path: signed/
          retention-days: 90

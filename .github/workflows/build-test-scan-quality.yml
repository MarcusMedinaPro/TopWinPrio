name: ðŸ§ª Build Test & Scan Quality

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  quality-check:
    runs-on: windows-latest
    name: Build, Test, and Virus Scan
    env:
      HAS_VT_KEY: ${{ secrets.VIRUSTOTAL_API_KEY != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ðŸ§© Ensure .NET Framework 3.5 Developer Pack
        shell: pwsh
        run: |
          Write-Host "Ensuring .NET Framework 3.5 targeting pack is available..."
          $targetPack = "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5"
          if (Test-Path $targetPack) {
              Write-Host ".NET Framework 3.5 targeting pack already installed."
              exit 0
          }

          function Test-NetFx35 {
              return (Test-Path $targetPack)
          }

          function Invoke-Step {
              param(
                  [string]$Label,
                  [scriptblock]$Action
              )

              Write-Host $Label
              try {
                  & $Action
                  if (Test-NetFx35) {
                      Write-Host "âœ… $Label"
                      return $true
                  } else {
                      Write-Warning "$Label completed but targeting pack still missing."
                      return $false
                  }
              }
              catch {
                  Write-Warning "$Label failed: $($_.Exception.Message)"
                  return $false
              }
          }

          $ErrorActionPreference = "Stop"

          if (Invoke-Step "Enabling Windows optional feature NetFx3..." {
              Enable-WindowsOptionalFeature -Online -FeatureName NetFx3 -All -NoRestart -ErrorAction Stop | Out-Null
          }) { exit 0 }

          if (Invoke-Step "Attempting DISM-based installation..." {
              Start-Process -FilePath dism -ArgumentList "/online","/enable-feature","/featurename:NetFx3","/All","/NoRestart" -Wait
              if ($LASTEXITCODE -ne 0) {
                  throw "DISM exited with code $LASTEXITCODE"
              }
          }) { exit 0 }

          $urls = @(
              "https://download.visualstudio.microsoft.com/download/pr/9b6c777c-85c1-48c8-8de5-5672d8d49bb5/8c5e7c9fb2472bcb0b54cb1a9489e5bb/ndp35sp1-kb2600211-x86-x64-allos-enu.exe",
              "https://github.com/marcusmedinapro/resources/releases/download/runtime/ndp35sp1.exe"
          )

          foreach ($url in $urls) {
              if (Invoke-Step "Installing via offline package from $url" {
                  $installer = Join-Path $env:TEMP "ndp35sp1.exe"
                  Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing -TimeoutSec 180
                  Start-Process -FilePath $installer -ArgumentList "/quiet","/norestart" -Wait
                  if ($LASTEXITCODE -ne 0) {
                      throw "Installer exited with code $LASTEXITCODE"
                  }
              }) { exit 0 }
          }

          throw "Unable to provision .NET Framework 3.5 Developer Pack on this runner."

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore and Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build --logger trx

      - name: VirusTotal Scan
        if: env.HAS_VT_KEY == 'true'
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VIRUSTOTAL_API_KEY }}
          files: |
            **/*.exe
            **/*.dll
            **/*.nupkg
          vt_monitor: false

      - name: Generate Summary Report
        shell: pwsh
        run: |
          $report = @()
          $report += "# ðŸ§ª Build & Test Quality Report"
          $report += ""
          $report += "## âœ… Build Status"
          $report += "Solution built successfully targeting .NET Framework 3.5."
          $report += ""
          $report += "## ðŸ§ª Test Results"
          $report += "All tests executed successfully."
          $report += ""
          if ($env:HAS_VT_KEY -eq "true") {
            $report += "## ðŸ§  VirusTotal"
            $report += "Scan completed â€“ see VirusTotal dashboard for details."
          } else {
            $report += "## ðŸ§  VirusTotal"
            $report += "Skipped â€“ no API key provided."
          }
          $report += ""
          $report += "_Report generated on $(Get-Date -Format u)_"
          $report | Out-File -FilePath quality-report.md -Encoding UTF8
          Get-Content quality-report.md | Write-Host

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-artifacts
          path: |
            **/bin/Release/*.exe
            **/bin/Release/*.dll
            **/*.nupkg
            quality-report.md

  publish-release:
    name: Publish unsigned release
    needs: quality-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download unsigned artifacts
        uses: actions/download-artifact@v4
        with:
          name: unsigned-artifacts
          path: dist

      - name: Generate SHA256 checksums
        run: |
          cd dist
          find . -type f -print0 | sort -z | xargs -0 sha256sum > SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

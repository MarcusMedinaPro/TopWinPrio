name: Release Sign and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: Sign, Scan and Publish Release
    runs-on: self-hosted   # üëà Use your local runner with SimplySign Desktop

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: üß≠ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup .NET SDK
      - name: üõ†Ô∏è Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3Ô∏è‚É£ Build and test before release
      - name: üß± Build and Test
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --logger trx

      # 4Ô∏è‚É£ Find files to sign
      - name: üîç Find release files
        id: findfiles
        shell: pwsh
        run: |
          $patterns = @("*.exe","*.dll","*.msi","*.nupkg","*.zip")
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Recurse -Filter $p | Select-Object -ExpandProperty FullName
          }
          $json = $files | ConvertTo-Json -Compress
          echo "files=$json" >> $env:GITHUB_OUTPUT

      # 5Ô∏è‚É£ Code sign all binaries using local SimplySign
      - name: üîè Code Sign via SimplySign Desktop
        shell: pwsh
        run: |
          $signtool = "C:\Program Files\Certum\SimplySign Desktop\signtool.exe"
          $tsa = "http://time.certum.pl"
          $files = (ConvertFrom-Json "${{ steps.findfiles.outputs.files }}")
          foreach ($f in $files) {
            if ($f -match '\.exe$|\.dll$|\.msi$') {
              Write-Host "Signing: $f"
              & $signtool sign /tr $tsa /td sha256 /fd sha256 $f
            }
          }

      # 6Ô∏è‚É£ Verify signatures
      - name: ‚úÖ Verify signatures
        shell: pwsh
        run: |
          $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          Get-ChildItem -Recurse -Include *.exe,*.dll,*.msi | ForEach-Object {
            Write-Host "Verifying: $($_.FullName)"
            & $signtool verify /pa /v $_.FullName
          }

      # 7Ô∏è‚É£ VirusTotal Scan (if API key exists)
      - name: üß† VirusTotal Scan
        if: ${{ secrets.VIRUSTOTAL_API_KEY != '' }}
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VIRUSTOTAL_API_KEY }}
          files: |
            **/*.exe
            **/*.dll
            **/*.nupkg
          vt_monitor: false

      # 8Ô∏è‚É£ Collect signed release files
      - name: üì¶ Collect release files
        shell: pwsh
        run: |
          mkdir uploads
          Get-ChildItem -Recurse -Include *.exe,*.dll,*.msi,*.nupkg,*.zip |
            Copy-Item -Destination uploads -Force

      # 9Ô∏è‚É£ Download latest quality report (optional)
      - name: üìú Download previous quality report
        id: fetch-report
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-test-scan.yml
          name: quality-report
          path: dist
        continue-on-error: true

      # üîü Prepare release notes
      - name: üßæ Prepare release notes
        id: notes
        shell: pwsh
        run: |
          $file = "dist/quality-report.md"
          if (Test-Path $file) {
            $body = Get-Content $file -Raw
          } else {
            $body = "# Release Notes`n`nNo quality report found.`nGenerated on $(Get-Date -Format u)"
          }
          echo "body<<EOF" >> $env:GITHUB_OUTPUT
          echo $body >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      # 11Ô∏è‚É£ Create GitHub Release
      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: uploads/*
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

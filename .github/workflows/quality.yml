name: üß© Full Quality & Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  quality-check:
    name: üîç Analyze, Secure & Test
    runs-on: windows-latest

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: üß≠ Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup tooling for legacy WinForms projects
      - name: üì¶ Setup NuGet
        uses: nuget/setup-nuget@v1

      - name: üõ†Ô∏è Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: ‚öôÔ∏è Setup .NET SDK (tools)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3Ô∏è‚É£ Restore & build with classic tooling
      - name: üì• Restore packages
        run: |
          nuget restore TopWinPrio.sln
          dotnet restore TopWinPrio.Tests/TopWinPrio.Tests.csproj

      - name: üèóÔ∏è Build solution
        run: msbuild TopWinPrio.sln /t:Build /p:Configuration=Release

      # 4Ô∏è‚É£ Tests & coverage (placeholder until automated tests exist)
      - name: üß™ Run tests
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe" TopWinPrio.Tests\bin\Release\TopWinPrio.Tests.dll /logger:trx

      - name: üìä Upload coverage to Codecov (if available)
        if: ${{ hashFiles('**/coverage.cobertura.xml') != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "**/coverage.cobertura.xml"
          fail_ci_if_error: false

      # 5Ô∏è‚É£ Advanced analysis
      - name: ‚òÅÔ∏è SonarCloud Scan
        if: ${{ secrets.SONAR_TOKEN != '' }}
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=MarcusMedina_TopWinPrio
            -Dsonar.organization=marcusmedina
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.cs.opencover.reportsPaths=**/coverage.cobertura.xml
            -Dsonar.verbose=true

      - name: üîí Snyk security check
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=TopWinPrio.CS/TopWinPrio.csproj --severity-threshold=medium --json-file-output=snyk-report.json

      # 6Ô∏è‚É£ Summary report
      - name: üßæ Generate summary report
        shell: pwsh
        run: |
          $report = @()
          $report += "# üß© Quality & Security Report"
          $report += ""
          $report += "## üß† CodeQL"
          $report += "CodeQL scanning is not enabled by default in this pipeline. Configure a dedicated CodeQL workflow to receive code scanning alerts."
          $report += ""
          $report += "## ‚òÅÔ∏è SonarCloud"
          $report += "Comprehensive code quality report available on [SonarCloud](https://sonarcloud.io/summary/new_code?id=MarcusMedina_TopWinPrio)."
          $report += ""
          $report += "## üîí Snyk Vulnerabilities"
          if (Test-Path snyk-report.json) {
            $report += "\`\`\`json"
            $report += (Get-Content snyk-report.json | ConvertFrom-Json | Select-Object -ExpandProperty vulnerabilities | Select-Object -First 5 | ConvertTo-Json -Depth 4)
            $report += "\`\`\`"
          } else {
            $report += "Snyk scan completed, no report file found (possibly no vulnerabilities)."
          }
          $report += ""
          $report += "## üìä Test Coverage"
          if ((Get-ChildItem -Path . -Recurse -Filter coverage.cobertura.xml -ErrorAction SilentlyContinue).Count -gt 0) {
            $report += "Coverage results uploaded to [Codecov](https://app.codecov.io/gh/MarcusMedina/TopWinPrio)."
          } else {
            $report += "Tests executed via MSTest (no coverage collector configured)."
          }
          $report += ""
          $report += "_Report generated on $(Get-Date -Format u)._"
          $report | Out-File -FilePath quality-report.md -Encoding UTF8

      - name: üì§ Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

name: üöÄ Release Pipeline (.NET 4.8)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  security-events: write

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: windows-latest
    name: 1Ô∏è‚É£ Build & Unit Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore classic NuGet packages
        run: nuget restore TopWinPrio.sln

      - name: Restore SDK-style/PackageReference dependencies
        run: dotnet restore TopWinPrio.Tests/TopWinPrio.Tests.csproj

      - name: Build Release configuration
        run: msbuild TopWinPrio.sln /p:Configuration=Release /m /p:Platform="Any CPU"

      - name: Run unit tests
        run: dotnet test TopWinPrio.Tests/TopWinPrio.Tests.csproj --configuration Release --no-build --logger trx

      - name: Upload unsigned binaries
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-bin
          path: |
            TopWinPrio.CS/bin/Release/*.exe
            TopWinPrio.CS/bin/Release/*.dll

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/TestResults/**/*.trx

  # Job 2: Quality Gate (runs after build)
  quality-gate:
    needs: build-and-test
    runs-on: windows-latest
    name: 2Ô∏è‚É£ Quality Gate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore packages
        run: nuget restore TopWinPrio.sln

      # CodeQL Security Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-extended,security-and-quality

      - name: Build for CodeQL Analysis
        run: msbuild TopWinPrio.sln /p:Configuration=Release /m /p:Platform="Any CPU"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # StyleCop & Code Analysis
      - name: Run Enhanced Code Analysis
        run: |
          msbuild TopWinPrio.sln /p:Configuration=Release /p:RunCodeAnalysis=true /p:TreatWarningsAsErrors=false /flp1:logfile=StyleCop-Report.log;verbosity=diagnostic /flp2:logfile=CodeAnalysis-Report.log;verbosity=normal
        continue-on-error: true

      # Dependency vulnerability scanning
      - name: Dependency Vulnerability Scan
        run: |
          dotnet list TopWinPrio.Tests/TopWinPrio.Tests.csproj package --vulnerable --include-transitive > vulnerability-report.txt 2>&1 || echo "No vulnerable packages detected" > vulnerability-report.txt
          Get-Content vulnerability-report.txt
        continue-on-error: true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            StyleCop-Report.log
            CodeAnalysis-Report.log
            vulnerability-report.txt

  # Job 3: Antivirus Scan (runs after quality gate passes)
  antivirus-scan:
    needs: quality-gate
    runs-on: windows-latest
    name: 3Ô∏è‚É£ Antivirus Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download unsigned binaries
        uses: actions/download-artifact@v4
        with:
          name: unsigned-bin
          path: ./unsigned

      - name: Generate SHA256 checksums
        run: |
          cd unsigned
          Get-FileHash *.exe, *.dll -Algorithm SHA256 | Select-Object Hash, @{Name="File";Expression={Split-Path $_.Path -Leaf}} | Format-Table -AutoSize | Out-File -FilePath SHA256SUMS.txt -Encoding UTF8
          Get-Content SHA256SUMS.txt

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v4
        id: virustotal
        with:
          vt_api_key: ${{ secrets.VIRUSTOTAL_API_KEY }}
          files: |
            unsigned/*.exe
            unsigned/*.dll
          vt_monitor: false

      - name: Save VirusTotal Results
        run: |
          $summary = "VirusTotal Scan Report - " + (Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC") + "`n"
          $summary += "================================================================`n`n"
          $summary += "Files Analyzed:`n"

          Get-ChildItem unsigned/*.exe, unsigned/*.dll | ForEach-Object {
            $fileSizeKB = [math]::Round($_.Length/1024, 2)
            $summary += "- $($_.Name) ($fileSizeKB KB)`n"
          }

          $summary += "`nScan Status: $($env:SCAN_STATUS)`n"
          $summary += "================================================================`n"

          if ($env:SCAN_STATUS -eq "success") {
            $summary += "‚úÖ VirusTotal scan completed successfully!`n"
          } else {
            $summary += "‚ö†Ô∏è  VirusTotal scan encountered issues`n"
          }

          $summary | Out-File -FilePath "unsigned/VirusTotal-Summary.txt" -Encoding UTF8
          Get-Content unsigned/VirusTotal-Summary.txt
        env:
          SCAN_STATUS: ${{ steps.virustotal.outcome }}

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            unsigned/SHA256SUMS.txt
            unsigned/VirusTotal-Summary.txt

  # Job 4: Code Signing (runs after antivirus scan passes)
  code-signing:
    needs: antivirus-scan
    runs-on: [self-hosted, windows, code-sign]
    name: 4Ô∏è‚É£ Code Signing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download unsigned binaries
        uses: actions/download-artifact@v4
        with:
          name: unsigned-bin
          path: ./unsigned

      - name: Copy Sign-All.ps1 script
        shell: pwsh
        run: |
          $sourcePath = "C:\Git\Certskit\Sign-All.ps1"
          $destPath = "unsigned\Sign-All.ps1"

          if (Test-Path $sourcePath) {
            Copy-Item $sourcePath $destPath -Force
            Write-Host "‚úÖ Copied Sign-All.ps1 from C:\Git\Certskit\" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Sign-All.ps1 not found at $sourcePath" -ForegroundColor Red
            exit 1
          }

      - name: Sign artifacts with Sign-All.ps1
        shell: pwsh
        run: |
          Write-Host "Running Sign-All.ps1 in unsigned directory..." -ForegroundColor Cyan
          cd unsigned
          & .\Sign-All.ps1 -SkipDefender

          # Check if signing was successful
          $signedFiles = Get-ChildItem -Include *.exe, *.dll -Recurse | Where-Object {
            $sig = Get-AuthenticodeSignature $_.FullName
            $sig.Status -eq 'Valid'
          }

          if ($signedFiles.Count -gt 0) {
            Write-Host "‚úÖ Successfully signed $($signedFiles.Count) file(s)" -ForegroundColor Green
          } else {
            Write-Error "No files were signed successfully"
            exit 1
          }

      - name: Prepare signed artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path signed | Out-Null

          # Copy signed files to signed folder
          $files = Get-ChildItem -Path unsigned -Include *.exe, *.dll -Recurse | Where-Object {
            $sig = Get-AuthenticodeSignature $_.FullName
            $sig.Status -eq 'Valid'
          }

          foreach ($f in $files) {
            Copy-Item $f.FullName signed/ -Force
            Write-Host "Copied signed: $($f.Name)" -ForegroundColor Green
          }

          # Copy the sign log if it exists
          if (Test-Path "unsigned\sign_log.txt") {
            Copy-Item "unsigned\sign_log.txt" signed/ -Force
            Write-Host "Copied sign_log.txt" -ForegroundColor Cyan
          }

          Write-Host "‚úÖ Signed artifacts prepared" -ForegroundColor Green

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-bin
          path: signed/

  # Job 5: Publish Release (runs after signing completes)
  publish-release:
    needs: code-signing
    runs-on: windows-latest
    name: 5Ô∏è‚É£ Publish Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download signed binaries
        uses: actions/download-artifact@v4
        with:
          name: signed-bin
          path: ./signed-bin

      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: scan-results
          path: ./scan-results

      - name: Create release packages
        run: |
          New-Item -ItemType Directory -Path "release-packages" -Force

          # Copy Manual.pdf to release directory
          Copy-Item "Manual.pdf" -Destination "signed-bin/Manual.pdf"

          # Create ZIP with installer + manual
          Compress-Archive -Path "signed-bin/*" -DestinationPath "release-packages/TopWinPrio-release.zip"

          # Create ZIP with just EXE
          Compress-Archive -Path "signed-bin/*.exe" -DestinationPath "release-packages/TopWinPrio-exe-only.zip"

          # Copy standalone EXE
          Copy-Item "signed-bin/TopWinPrio.exe" -Destination "release-packages/TopWinPrio.exe"

          Get-ChildItem -Path "release-packages" -Recurse

      - name: Generate release checksums
        run: |
          cd release-packages
          Get-ChildItem -File | Where-Object { $_.Name -ne "SHA256SUMS.txt" } | Get-FileHash -Algorithm SHA256 | Select-Object Hash, @{Name="File";Expression={$_.Path | Split-Path -Leaf}} | Format-Table -AutoSize | Out-File -FilePath SHA256SUMS.txt -Encoding UTF8
          Get-Content SHA256SUMS.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-packages/TopWinPrio-release.zip
            release-packages/TopWinPrio-exe-only.zip
            release-packages/TopWinPrio.exe
            release-packages/SHA256SUMS.txt
            scan-results/VirusTotal-Summary.txt
          generate_release_notes: true
          draft: false
          prerelease: false
